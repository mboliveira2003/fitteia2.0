/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * student-hub-api
 * Api Documentation for StudentHub API
 * OpenAPI spec version: 0.0
 */
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  ChangeEmail200,
  ChangeEmailParams,
  ChangeFirstName200,
  ChangeFirstNameParams,
  ChangeLastName200,
  ChangeLastNameParams,
  ChangePassword200,
  ChangePasswordParams,
  ChangeProfilePicture200,
  ChangeProfilePictureParams,
  ChangeSchool200,
  ChangeSchoolParams,
  ChangeSchoolYear200,
  ChangeSchoolYearParams,
  ChangeUsername200,
  ChangeUsernameParams,
  GetUserProfile200
} from '.././model'
import { instance } from '.././instance';



/**
 * Change profile picture
 */
export const changeProfilePicture = (
    params: ChangeProfilePictureParams,
 ) => {
      
      
      return instance<ChangeProfilePicture200>(
      {url: `/v0.0/settings/change/profilePicture`, method: 'POST',
        params
    },
      );
    }
  


export const getChangeProfilePictureMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeProfilePicture>>, TError,{params: ChangeProfilePictureParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changeProfilePicture>>, TError,{params: ChangeProfilePictureParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeProfilePicture>>, {params: ChangeProfilePictureParams}> = (props) => {
          const {params} = props ?? {};

          return  changeProfilePicture(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeProfilePictureMutationResult = NonNullable<Awaited<ReturnType<typeof changeProfilePicture>>>
    
    export type ChangeProfilePictureMutationError = unknown

    export const useChangeProfilePicture = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeProfilePicture>>, TError,{params: ChangeProfilePictureParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changeProfilePicture>>,
        TError,
        {params: ChangeProfilePictureParams},
        TContext
      > => {

      const mutationOptions = getChangeProfilePictureMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Change email
 */
export const changeEmail = (
    params: ChangeEmailParams,
 ) => {
      
      
      return instance<ChangeEmail200>(
      {url: `/v0.0/settings/change/email`, method: 'POST',
        params
    },
      );
    }
  


export const getChangeEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeEmail>>, TError,{params: ChangeEmailParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changeEmail>>, TError,{params: ChangeEmailParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeEmail>>, {params: ChangeEmailParams}> = (props) => {
          const {params} = props ?? {};

          return  changeEmail(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeEmailMutationResult = NonNullable<Awaited<ReturnType<typeof changeEmail>>>
    
    export type ChangeEmailMutationError = unknown

    export const useChangeEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeEmail>>, TError,{params: ChangeEmailParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changeEmail>>,
        TError,
        {params: ChangeEmailParams},
        TContext
      > => {

      const mutationOptions = getChangeEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Change password
 */
export const changePassword = (
    params: ChangePasswordParams,
 ) => {
      
      
      return instance<ChangePassword200>(
      {url: `/v0.0/settings/change/password`, method: 'POST',
        params
    },
      );
    }
  


export const getChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changePassword>>, TError,{params: ChangePasswordParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changePassword>>, TError,{params: ChangePasswordParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changePassword>>, {params: ChangePasswordParams}> = (props) => {
          const {params} = props ?? {};

          return  changePassword(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof changePassword>>>
    
    export type ChangePasswordMutationError = unknown

    export const useChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changePassword>>, TError,{params: ChangePasswordParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changePassword>>,
        TError,
        {params: ChangePasswordParams},
        TContext
      > => {

      const mutationOptions = getChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Change username
 */
export const changeUsername = (
    params: ChangeUsernameParams,
 ) => {
      
      
      return instance<ChangeUsername200>(
      {url: `/v0.0/settings/change/username`, method: 'POST',
        params
    },
      );
    }
  


export const getChangeUsernameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeUsername>>, TError,{params: ChangeUsernameParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changeUsername>>, TError,{params: ChangeUsernameParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeUsername>>, {params: ChangeUsernameParams}> = (props) => {
          const {params} = props ?? {};

          return  changeUsername(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof changeUsername>>>
    
    export type ChangeUsernameMutationError = unknown

    export const useChangeUsername = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeUsername>>, TError,{params: ChangeUsernameParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changeUsername>>,
        TError,
        {params: ChangeUsernameParams},
        TContext
      > => {

      const mutationOptions = getChangeUsernameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Change school year
 */
export const changeSchoolYear = (
    params: ChangeSchoolYearParams,
 ) => {
      
      
      return instance<ChangeSchoolYear200>(
      {url: `/v0.0/settings/change/schoolYear`, method: 'POST',
        params
    },
      );
    }
  


export const getChangeSchoolYearMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeSchoolYear>>, TError,{params: ChangeSchoolYearParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changeSchoolYear>>, TError,{params: ChangeSchoolYearParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeSchoolYear>>, {params: ChangeSchoolYearParams}> = (props) => {
          const {params} = props ?? {};

          return  changeSchoolYear(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeSchoolYearMutationResult = NonNullable<Awaited<ReturnType<typeof changeSchoolYear>>>
    
    export type ChangeSchoolYearMutationError = unknown

    export const useChangeSchoolYear = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeSchoolYear>>, TError,{params: ChangeSchoolYearParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changeSchoolYear>>,
        TError,
        {params: ChangeSchoolYearParams},
        TContext
      > => {

      const mutationOptions = getChangeSchoolYearMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Change school
 */
export const changeSchool = (
    params: ChangeSchoolParams,
 ) => {
      
      
      return instance<ChangeSchool200>(
      {url: `/v0.0/settings/change/school`, method: 'POST',
        params
    },
      );
    }
  


export const getChangeSchoolMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeSchool>>, TError,{params: ChangeSchoolParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changeSchool>>, TError,{params: ChangeSchoolParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeSchool>>, {params: ChangeSchoolParams}> = (props) => {
          const {params} = props ?? {};

          return  changeSchool(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeSchoolMutationResult = NonNullable<Awaited<ReturnType<typeof changeSchool>>>
    
    export type ChangeSchoolMutationError = unknown

    export const useChangeSchool = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeSchool>>, TError,{params: ChangeSchoolParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changeSchool>>,
        TError,
        {params: ChangeSchoolParams},
        TContext
      > => {

      const mutationOptions = getChangeSchoolMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Change first name
 */
export const changeFirstName = (
    params: ChangeFirstNameParams,
 ) => {
      
      
      return instance<ChangeFirstName200>(
      {url: `/v0.0/settings/change/name/first`, method: 'POST',
        params
    },
      );
    }
  


export const getChangeFirstNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeFirstName>>, TError,{params: ChangeFirstNameParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changeFirstName>>, TError,{params: ChangeFirstNameParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeFirstName>>, {params: ChangeFirstNameParams}> = (props) => {
          const {params} = props ?? {};

          return  changeFirstName(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeFirstNameMutationResult = NonNullable<Awaited<ReturnType<typeof changeFirstName>>>
    
    export type ChangeFirstNameMutationError = unknown

    export const useChangeFirstName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeFirstName>>, TError,{params: ChangeFirstNameParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changeFirstName>>,
        TError,
        {params: ChangeFirstNameParams},
        TContext
      > => {

      const mutationOptions = getChangeFirstNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * change last name
 */
export const changeLastName = (
    params: ChangeLastNameParams,
 ) => {
      
      
      return instance<ChangeLastName200>(
      {url: `/v0.0/settings/change/name/last`, method: 'POST',
        params
    },
      );
    }
  


export const getChangeLastNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeLastName>>, TError,{params: ChangeLastNameParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changeLastName>>, TError,{params: ChangeLastNameParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeLastName>>, {params: ChangeLastNameParams}> = (props) => {
          const {params} = props ?? {};

          return  changeLastName(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeLastNameMutationResult = NonNullable<Awaited<ReturnType<typeof changeLastName>>>
    
    export type ChangeLastNameMutationError = unknown

    export const useChangeLastName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeLastName>>, TError,{params: ChangeLastNameParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changeLastName>>,
        TError,
        {params: ChangeLastNameParams},
        TContext
      > => {

      const mutationOptions = getChangeLastNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get user profile settings
 */
export const getUserProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return instance<GetUserProfile200>(
      {url: `/v0.0/settings/get`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserProfileQueryKey = () => {
    return [`/v0.0/settings/get`] as const;
    }

    
export const getGetUserProfileQueryOptions = <TData = Awaited<ReturnType<typeof getUserProfile>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProfile>>> = ({ signal }) => getUserProfile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>
export type GetUserProfileQueryError = unknown

export const useGetUserProfile = <TData = Awaited<ReturnType<typeof getUserProfile>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



