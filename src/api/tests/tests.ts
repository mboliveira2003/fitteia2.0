/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * student-hub-api
 * Api Documentation for StudentHub API
 * OpenAPI spec version: 0.0
 */
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  AddTest200,
  AddTestBody,
  CreateTest200,
  CreateTestBody,
  DeleteTest200,
  DeleteTestParams,
  GetTestEvents200,
  GetTestEventsParams,
  GetTestProfile200,
  GetTestProfileParams,
  GetTests200,
  SubmitTest200,
  SubmitTestBody
} from '.././model'
import { instance } from '.././instance';



/**
 * Get all tests
 */
export const getTests = (
    
 signal?: AbortSignal
) => {
      
      
      return instance<GetTests200>(
      {url: `/v0.0/tests/all`, method: 'GET', signal
    },
      );
    }
  

export const getGetTestsQueryKey = () => {
    return [`/v0.0/tests/all`] as const;
    }

    
export const getGetTestsQueryOptions = <TData = Awaited<ReturnType<typeof getTests>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTests>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTests>>> = ({ signal }) => getTests(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTests>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTestsQueryResult = NonNullable<Awaited<ReturnType<typeof getTests>>>
export type GetTestsQueryError = unknown

export const useGetTests = <TData = Awaited<ReturnType<typeof getTests>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTests>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTestsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Add a test
 */
export const addTest = (
    addTestBody: AddTestBody,
 ) => {
      
      
      return instance<AddTest200>(
      {url: `/v0.0/tests/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addTestBody
    },
      );
    }
  


export const getAddTestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addTest>>, TError,{data: AddTestBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addTest>>, TError,{data: AddTestBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addTest>>, {data: AddTestBody}> = (props) => {
          const {data} = props ?? {};

          return  addTest(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddTestMutationResult = NonNullable<Awaited<ReturnType<typeof addTest>>>
    export type AddTestMutationBody = AddTestBody
    export type AddTestMutationError = unknown

    export const useAddTest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addTest>>, TError,{data: AddTestBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof addTest>>,
        TError,
        {data: AddTestBody},
        TContext
      > => {

      const mutationOptions = getAddTestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete a test
 */
export const deleteTest = (
    params: DeleteTestParams,
 ) => {
      
      
      return instance<DeleteTest200>(
      {url: `/v0.0/tests/delete`, method: 'DELETE',
        params
    },
      );
    }
  


export const getDeleteTestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTest>>, TError,{params: DeleteTestParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteTest>>, TError,{params: DeleteTestParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTest>>, {params: DeleteTestParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteTest(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTestMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTest>>>
    
    export type DeleteTestMutationError = unknown

    export const useDeleteTest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTest>>, TError,{params: DeleteTestParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTest>>,
        TError,
        {params: DeleteTestParams},
        TContext
      > => {

      const mutationOptions = getDeleteTestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get test profile
 */
export const getTestProfile = (
    params: GetTestProfileParams,
 signal?: AbortSignal
) => {
      
      
      return instance<GetTestProfile200>(
      {url: `/v0.0/tests/profile`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTestProfileQueryKey = (params: GetTestProfileParams,) => {
    return [`/v0.0/tests/profile`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTestProfileQueryOptions = <TData = Awaited<ReturnType<typeof getTestProfile>>, TError = unknown>(params: GetTestProfileParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTestProfile>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestProfileQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestProfile>>> = ({ signal }) => getTestProfile(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTestProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTestProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getTestProfile>>>
export type GetTestProfileQueryError = unknown

export const useGetTestProfile = <TData = Awaited<ReturnType<typeof getTestProfile>>, TError = unknown>(
 params: GetTestProfileParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTestProfile>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTestProfileQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get all test events by test id
 */
export const getTestEvents = (
    params: GetTestEventsParams,
 signal?: AbortSignal
) => {
      
      
      return instance<GetTestEvents200>(
      {url: `/v0.0/tests/testEvent`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTestEventsQueryKey = (params: GetTestEventsParams,) => {
    return [`/v0.0/tests/testEvent`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTestEventsQueryOptions = <TData = Awaited<ReturnType<typeof getTestEvents>>, TError = unknown>(params: GetTestEventsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTestEvents>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestEvents>>> = ({ signal }) => getTestEvents(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTestEvents>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTestEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getTestEvents>>>
export type GetTestEventsQueryError = unknown

export const useGetTestEvents = <TData = Awaited<ReturnType<typeof getTestEvents>>, TError = unknown>(
 params: GetTestEventsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTestEvents>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTestEventsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * create a test
 */
export const createTest = (
    createTestBody: CreateTestBody,
 ) => {
      
      
      return instance<CreateTest200>(
      {url: `/v0.0/tests/test`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTestBody
    },
      );
    }
  


export const getCreateTestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTest>>, TError,{data: CreateTestBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTest>>, TError,{data: CreateTestBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTest>>, {data: CreateTestBody}> = (props) => {
          const {data} = props ?? {};

          return  createTest(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTestMutationResult = NonNullable<Awaited<ReturnType<typeof createTest>>>
    export type CreateTestMutationBody = CreateTestBody
    export type CreateTestMutationError = unknown

    export const useCreateTest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTest>>, TError,{data: CreateTestBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createTest>>,
        TError,
        {data: CreateTestBody},
        TContext
      > => {

      const mutationOptions = getCreateTestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Submit a test
 */
export const submitTest = (
    submitTestBody: SubmitTestBody,
 ) => {
      
      
      return instance<SubmitTest200>(
      {url: `/v0.0/tests/submit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: submitTestBody
    },
      );
    }
  


export const getSubmitTestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitTest>>, TError,{data: SubmitTestBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof submitTest>>, TError,{data: SubmitTestBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof submitTest>>, {data: SubmitTestBody}> = (props) => {
          const {data} = props ?? {};

          return  submitTest(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubmitTestMutationResult = NonNullable<Awaited<ReturnType<typeof submitTest>>>
    export type SubmitTestMutationBody = SubmitTestBody
    export type SubmitTestMutationError = unknown

    export const useSubmitTest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitTest>>, TError,{data: SubmitTestBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof submitTest>>,
        TError,
        {data: SubmitTestBody},
        TContext
      > => {

      const mutationOptions = getSubmitTestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    