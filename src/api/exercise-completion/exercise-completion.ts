/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * student-hub-api
 * Api Documentation for StudentHub API
 * OpenAPI spec version: 0.0
 */
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  ExerciseFeedback,
  GetExercise200,
  GetExerciseParams,
  SubmitExerciseBody,
  SubmitExerciseParams
} from '.././model'
import { instance } from '.././instance';



/**
 * Submit an exercise
 */
export const submitExercise = (
    submitExerciseBody: SubmitExerciseBody,
    params: SubmitExerciseParams,
 ) => {
      
      
      return instance<ExerciseFeedback>(
      {url: `/v0.0/exercises/submit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: submitExerciseBody,
        params
    },
      );
    }
  


export const getSubmitExerciseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitExercise>>, TError,{data: SubmitExerciseBody;params: SubmitExerciseParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof submitExercise>>, TError,{data: SubmitExerciseBody;params: SubmitExerciseParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof submitExercise>>, {data: SubmitExerciseBody;params: SubmitExerciseParams}> = (props) => {
          const {data,params} = props ?? {};

          return  submitExercise(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubmitExerciseMutationResult = NonNullable<Awaited<ReturnType<typeof submitExercise>>>
    export type SubmitExerciseMutationBody = SubmitExerciseBody
    export type SubmitExerciseMutationError = unknown

    export const useSubmitExercise = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitExercise>>, TError,{data: SubmitExerciseBody;params: SubmitExerciseParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof submitExercise>>,
        TError,
        {data: SubmitExerciseBody;params: SubmitExerciseParams},
        TContext
      > => {

      const mutationOptions = getSubmitExerciseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get an exercise by id
 */
export const getExercise = (
    params: GetExerciseParams,
 signal?: AbortSignal
) => {
      
      
      return instance<GetExercise200>(
      {url: `/v0.0/exercises/get`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetExerciseQueryKey = (params: GetExerciseParams,) => {
    return [`/v0.0/exercises/get`, ...(params ? [params]: [])] as const;
    }

    
export const getGetExerciseQueryOptions = <TData = Awaited<ReturnType<typeof getExercise>>, TError = unknown>(params: GetExerciseParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExercise>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExerciseQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExercise>>> = ({ signal }) => getExercise(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExercise>>, TError, TData> & { queryKey: QueryKey }
}

export type GetExerciseQueryResult = NonNullable<Awaited<ReturnType<typeof getExercise>>>
export type GetExerciseQueryError = unknown

export const useGetExercise = <TData = Awaited<ReturnType<typeof getExercise>>, TError = unknown>(
 params: GetExerciseParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExercise>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetExerciseQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



