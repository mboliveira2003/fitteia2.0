/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * student-hub-api
 * Api Documentation for StudentHub API
 * OpenAPI spec version: 0.0
 */
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  GetCourseSubtopics200,
  GetCourseSubtopicsParams,
  GetCourseTasks200,
  GetCourseTasksParams,
  GetCourseTopics200,
  SubmitTaskParams,
  TaskFeedback
} from '.././model'
import { instance } from '.././instance';



/**
 * Submit a task
 */
export const submitTask = (
    params: SubmitTaskParams,
 ) => {
      
      
      return instance<TaskFeedback>(
      {url: `/v0.0/course/tasks/submit`, method: 'POST',
        params
    },
      );
    }
  


export const getSubmitTaskMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitTask>>, TError,{params: SubmitTaskParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof submitTask>>, TError,{params: SubmitTaskParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof submitTask>>, {params: SubmitTaskParams}> = (props) => {
          const {params} = props ?? {};

          return  submitTask(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubmitTaskMutationResult = NonNullable<Awaited<ReturnType<typeof submitTask>>>
    
    export type SubmitTaskMutationError = unknown

    export const useSubmitTask = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitTask>>, TError,{params: SubmitTaskParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof submitTask>>,
        TError,
        {params: SubmitTaskParams},
        TContext
      > => {

      const mutationOptions = getSubmitTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get all topics for a course
 */
export const getCourseTopics = (
    
 signal?: AbortSignal
) => {
      
      
      return instance<GetCourseTopics200>(
      {url: `/v0.0/course/topics`, method: 'GET', signal
    },
      );
    }
  

export const getGetCourseTopicsQueryKey = () => {
    return [`/v0.0/course/topics`] as const;
    }

    
export const getGetCourseTopicsQueryOptions = <TData = Awaited<ReturnType<typeof getCourseTopics>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCourseTopics>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCourseTopicsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCourseTopics>>> = ({ signal }) => getCourseTopics(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCourseTopics>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCourseTopicsQueryResult = NonNullable<Awaited<ReturnType<typeof getCourseTopics>>>
export type GetCourseTopicsQueryError = unknown

export const useGetCourseTopics = <TData = Awaited<ReturnType<typeof getCourseTopics>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCourseTopics>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCourseTopicsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get all subtopics for a course topic
 */
export const getCourseSubtopics = (
    params: GetCourseSubtopicsParams,
 signal?: AbortSignal
) => {
      
      
      return instance<GetCourseSubtopics200>(
      {url: `/v0.0/course/subtopics`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCourseSubtopicsQueryKey = (params: GetCourseSubtopicsParams,) => {
    return [`/v0.0/course/subtopics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCourseSubtopicsQueryOptions = <TData = Awaited<ReturnType<typeof getCourseSubtopics>>, TError = unknown>(params: GetCourseSubtopicsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCourseSubtopics>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCourseSubtopicsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCourseSubtopics>>> = ({ signal }) => getCourseSubtopics(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCourseSubtopics>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCourseSubtopicsQueryResult = NonNullable<Awaited<ReturnType<typeof getCourseSubtopics>>>
export type GetCourseSubtopicsQueryError = unknown

export const useGetCourseSubtopics = <TData = Awaited<ReturnType<typeof getCourseSubtopics>>, TError = unknown>(
 params: GetCourseSubtopicsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCourseSubtopics>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCourseSubtopicsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get all tasks for a course subtopic
 */
export const getCourseTasks = (
    params: GetCourseTasksParams,
 signal?: AbortSignal
) => {
      
      
      return instance<GetCourseTasks200>(
      {url: `/v0.0/course/tasks`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCourseTasksQueryKey = (params: GetCourseTasksParams,) => {
    return [`/v0.0/course/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCourseTasksQueryOptions = <TData = Awaited<ReturnType<typeof getCourseTasks>>, TError = unknown>(params: GetCourseTasksParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCourseTasks>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCourseTasksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCourseTasks>>> = ({ signal }) => getCourseTasks(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCourseTasks>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCourseTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getCourseTasks>>>
export type GetCourseTasksQueryError = unknown

export const useGetCourseTasks = <TData = Awaited<ReturnType<typeof getCourseTasks>>, TError = unknown>(
 params: GetCourseTasksParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCourseTasks>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCourseTasksQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



