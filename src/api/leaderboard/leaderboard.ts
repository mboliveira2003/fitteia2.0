/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * student-hub-api
 * Api Documentation for StudentHub API
 * OpenAPI spec version: 0.0
 */
import {
  useQuery
} from 'react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  GetSchoolsLeaderboardCorrect200,
  GetSchoolsLeaderboardCorrectParams,
  GetUsersLeaderboardCorrect200,
  GetUsersLeaderboardCorrectParams
} from '.././model'
import { instance } from '.././instance';



/**
 * Get leaderboard for schools based on correct answers
 */
export const getSchoolsLeaderboardCorrect = (
    params: GetSchoolsLeaderboardCorrectParams,
 signal?: AbortSignal
) => {
      
      
      return instance<GetSchoolsLeaderboardCorrect200>(
      {url: `/v0.0/leaderboard/schools/correct`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetSchoolsLeaderboardCorrectQueryKey = (params: GetSchoolsLeaderboardCorrectParams,) => {
    return [`/v0.0/leaderboard/schools/correct`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSchoolsLeaderboardCorrectQueryOptions = <TData = Awaited<ReturnType<typeof getSchoolsLeaderboardCorrect>>, TError = unknown>(params: GetSchoolsLeaderboardCorrectParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSchoolsLeaderboardCorrect>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSchoolsLeaderboardCorrectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchoolsLeaderboardCorrect>>> = ({ signal }) => getSchoolsLeaderboardCorrect(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSchoolsLeaderboardCorrect>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSchoolsLeaderboardCorrectQueryResult = NonNullable<Awaited<ReturnType<typeof getSchoolsLeaderboardCorrect>>>
export type GetSchoolsLeaderboardCorrectQueryError = unknown

export const useGetSchoolsLeaderboardCorrect = <TData = Awaited<ReturnType<typeof getSchoolsLeaderboardCorrect>>, TError = unknown>(
 params: GetSchoolsLeaderboardCorrectParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSchoolsLeaderboardCorrect>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSchoolsLeaderboardCorrectQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get leaderboard for users based on correct answers
 */
export const getUsersLeaderboardCorrect = (
    params: GetUsersLeaderboardCorrectParams,
 signal?: AbortSignal
) => {
      
      
      return instance<GetUsersLeaderboardCorrect200>(
      {url: `/v0.0/leaderboard/users/correct`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUsersLeaderboardCorrectQueryKey = (params: GetUsersLeaderboardCorrectParams,) => {
    return [`/v0.0/leaderboard/users/correct`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUsersLeaderboardCorrectQueryOptions = <TData = Awaited<ReturnType<typeof getUsersLeaderboardCorrect>>, TError = unknown>(params: GetUsersLeaderboardCorrectParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersLeaderboardCorrect>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersLeaderboardCorrectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersLeaderboardCorrect>>> = ({ signal }) => getUsersLeaderboardCorrect(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersLeaderboardCorrect>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersLeaderboardCorrectQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersLeaderboardCorrect>>>
export type GetUsersLeaderboardCorrectQueryError = unknown

export const useGetUsersLeaderboardCorrect = <TData = Awaited<ReturnType<typeof getUsersLeaderboardCorrect>>, TError = unknown>(
 params: GetUsersLeaderboardCorrectParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersLeaderboardCorrect>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersLeaderboardCorrectQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get leaderboard rank for user
 */
export const getUserRank = (
    
 signal?: AbortSignal
) => {
      
      
      return instance<number>(
      {url: `/v0.0/leaderboard/user/rank`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserRankQueryKey = () => {
    return [`/v0.0/leaderboard/user/rank`] as const;
    }

    
export const getGetUserRankQueryOptions = <TData = Awaited<ReturnType<typeof getUserRank>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserRank>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserRankQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserRank>>> = ({ signal }) => getUserRank(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserRank>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserRankQueryResult = NonNullable<Awaited<ReturnType<typeof getUserRank>>>
export type GetUserRankQueryError = unknown

export const useGetUserRank = <TData = Awaited<ReturnType<typeof getUserRank>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserRank>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserRankQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



