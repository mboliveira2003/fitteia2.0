/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * student-hub-api
 * Api Documentation for StudentHub API
 * OpenAPI spec version: 0.0
 */
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  ExamFeedback,
  GetExamHistory200,
  GetExamHistoryParams,
  GetExamProfile200,
  GetExams200,
  SubmitExamBody
} from '.././model'
import { instance } from '.././instance';



/**
 * Get all exams
 */
export const getExams = (
    
 signal?: AbortSignal
) => {
      
      
      return instance<GetExams200>(
      {url: `/v0.0/exams/all`, method: 'GET', signal
    },
      );
    }
  

export const getGetExamsQueryKey = () => {
    return [`/v0.0/exams/all`] as const;
    }

    
export const getGetExamsQueryOptions = <TData = Awaited<ReturnType<typeof getExams>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExams>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExamsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExams>>> = ({ signal }) => getExams(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExams>>, TError, TData> & { queryKey: QueryKey }
}

export type GetExamsQueryResult = NonNullable<Awaited<ReturnType<typeof getExams>>>
export type GetExamsQueryError = unknown

export const useGetExams = <TData = Awaited<ReturnType<typeof getExams>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExams>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetExamsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Submit an exam
 */
export const submitExam = (
    submitExamBody: SubmitExamBody,
 ) => {
      
      
      return instance<ExamFeedback>(
      {url: `/v0.0/exams/submit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: submitExamBody
    },
      );
    }
  


export const getSubmitExamMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitExam>>, TError,{data: SubmitExamBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof submitExam>>, TError,{data: SubmitExamBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof submitExam>>, {data: SubmitExamBody}> = (props) => {
          const {data} = props ?? {};

          return  submitExam(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubmitExamMutationResult = NonNullable<Awaited<ReturnType<typeof submitExam>>>
    export type SubmitExamMutationBody = SubmitExamBody
    export type SubmitExamMutationError = unknown

    export const useSubmitExam = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitExam>>, TError,{data: SubmitExamBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof submitExam>>,
        TError,
        {data: SubmitExamBody},
        TContext
      > => {

      const mutationOptions = getSubmitExamMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get exam history
 */
export const getExamHistory = (
    params: GetExamHistoryParams,
 signal?: AbortSignal
) => {
      
      
      return instance<GetExamHistory200>(
      {url: `/v0.0/exams/history`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetExamHistoryQueryKey = (params: GetExamHistoryParams,) => {
    return [`/v0.0/exams/history`, ...(params ? [params]: [])] as const;
    }

    
export const getGetExamHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getExamHistory>>, TError = unknown>(params: GetExamHistoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExamHistory>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExamHistoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExamHistory>>> = ({ signal }) => getExamHistory(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExamHistory>>, TError, TData> & { queryKey: QueryKey }
}

export type GetExamHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getExamHistory>>>
export type GetExamHistoryQueryError = unknown

export const useGetExamHistory = <TData = Awaited<ReturnType<typeof getExamHistory>>, TError = unknown>(
 params: GetExamHistoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExamHistory>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetExamHistoryQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get exam profile
 */
export const getExamProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return instance<GetExamProfile200>(
      {url: `/v0.0/exams/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetExamProfileQueryKey = () => {
    return [`/v0.0/exams/profile`] as const;
    }

    
export const getGetExamProfileQueryOptions = <TData = Awaited<ReturnType<typeof getExamProfile>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExamProfile>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExamProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExamProfile>>> = ({ signal }) => getExamProfile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExamProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetExamProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getExamProfile>>>
export type GetExamProfileQueryError = unknown

export const useGetExamProfile = <TData = Awaited<ReturnType<typeof getExamProfile>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExamProfile>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetExamProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



